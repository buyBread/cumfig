
//
// - main cumfig file -
//

echo "[CUMFIG: exec] main"

sv_cheats 1

fps_max 0 // remove fps limit
		  // might result in memory loss, however benifits outweigh this
		  // use a value of 180 if this concerns you

echo "[CUMFIG: DEBUG] fps limit removed"
echo "[CUMFIG: WARN] ^ might result in possible memory loss"

exec cumfig/binds       // key binds
exec cumfig/gfx			// graphical settings
exec cumfig/network		// network options

//
// - preferences -
//

fov_desired 90
viewmodel_fov 90

cl_flipviewmodels 1 // left handed viewmodels

tf_use_min_viewmodels 1 // minimal viewmodels

hud_fastswitch 1

cl_autoreload 1

cl_autorezoom 1

tf_scoreboard_ping_as_text 1
tf_scoreboard_mouse_mode 2

hud_combattext 1
hud_combattext_batching 1
hud_combattext_batching_window 2

//
// - threading -
//

r_threaded_particles 1 // process particle systems in parallel
mat_queue_mode 2 // multi-threaded material queuing
studio_queue_mode 1 // use queue calls for studio renders
host_thread_mode 1 // run the host in threaded mode

echo "[CUMFIG: warn] host_thread_mode -> 1"

//
// - mat queue system -
//

r_queued_decals 0 // disabled due to crashing
r_queued_post_processing 0 // disabled due to failing to render post in time, resulting in a missing texture
r_queued_ropes 1 // queue some rope rendering using the material system


//
// - memory -
//

lzma_persistent_buffer 1 // keep the LZMA compression system in memory to prevent reloads of it

cl_always_flush_models 0 // keep models loaded in between map loads and prevent crashes from model flushing

mat_levelflush 1 // clear temporary memory to prevent overloading memory stores

mat_bufferprimitives 1 // skip flushing of primitives when meshes draw

sv_forcepreload 0

//
// - optimization -
//

mat_vsync 0 // disable vsync

engine_no_focus_sleep 0 // always keep the game focused

r_fastzreject 1

r_entityclips 1 // clip entities preferably using clip planes

disp_dynamic 0 // don't use displacements for world geometry

r_hunkalloclightmaps 1 // allocate lightmaps in the hunk

r_frustumcullworld 1 // cull on world draw

r_worldlistcache 1 // cache some world rendering

mat_clipz 1 // clips what is drawn for a performance improvement

mat_use_compressed_hdr_textures 1 // use compressed HDR textures

r_occlusion 1 // use CPU to have the GPU skip rendering models/props you cannot see
r_occludeemaxarea 1
r_occluderminarea 10

mat_tonemapping_occlusion_use_stencil 0 // do not use stencil buffer for occlusion queries
										// set to 1 if gpu is on the weaker side

host_flush_threshold 0 

r_norefresh 1 // do not store a useless and unused frame time variable

fast_fogvolume 1 // use a fast path method to find the visible fog volume

r_pixelfog 1 // use a pixel shader for fog if possible

mat_compressedtextures 1 // allow for compressed textures
mat_managedtextures 1 // use Direct3D to manage textures
mat_mipmaptextures 1 // mipmap textures to optimize textures

cl_ShowBoneSetupEnts 0

sv_alternateticks 0 // don't skip ticks

mod_offline_hdr_switch 1

// opengl (linux)

gl_debug_output 1 // debug messages

gl_pow2_tempmem 1 // makes memory allocation behavior more stable

gl_magnify_resolve_mode 1 // use fastest resolve mode when up scaling too

gl_paircache_rows_lg2 15 // increase shader pair cache size
gl_paircache_ways_lg2 10 // keep some loops small by using minimum ways size